#pandas 入门
pip install pandas 
from pandas import Series,DataFrame
import pandas as pd
import numpy as np
##series  一维数组
obj=Series([4,7,-5,3])

obj.value #获取值
obj.index#获取索引

obj2=Series([4,7,-5,3],index=['d','b','a','c'])#自行建索引，类比R的 colname

obj2['a'] #通过索引选值
obj2['d']=6 #通过索引修改值

obj2[obj2>0] 
obj2*2
np.exp(obj2)
###上述操作都跟R相差不多
'b' in obj2

sdata={'ohio':35000,'texas':71000,'oregon':16000,'utah':5000} #数据字典
obj3=Series(sdata) #将数据字典直接转化为series格式

obj3.name = 'population'
obj3.index.name='state'

obj.index=['bob','steve','jeff','ryan']
obj

###dataframe

data= {'state':['ohio','ohio','ohio','nebada','nevada'],'year':[2000,2001,2002,2001,2002],'pop':[1.5,1.7,3.6,2.4,2.9]}
frame=DataFrame(data)

DataFrame(data,columns=['year','state','pop']) #转变列顺序

frame2= DataFrame(data,columns=['year','state','pop','debt'],index=['one','two','three','four','five'])

frame2['state'] #抽取某列
frame2.year #第二种方法

frame2.ix['three']  #索引到某一个值
frame2['debt']=16.5

frame2['debt']=np.arange(5.)

frame2['eastern']=frame2.state == 'ohio'  #创造薪列

frame2

del frame2['eastern']  #删除列

#嵌套字典
pop ={'nevada':{2001:2.4,2002:2.9},'ohio':{2000:1.5,2001:1.7,2002:3.6}}

frame3= DataFrame(pop)
frame3.T

frame3.index.name= 'year';frame3.columns.name='state'

obj
####索引对象

obj =Series(range(3),index=['a','b','c'])

index = obj.index

index
index[1:]

index= pd.Index(np.arange(3))

obj2=Series([1.5,-2.5,0],index=index)

obj2.index is index

'ohio' in frame3.columns 

2003 in frame3.index 

frame3.index.unique

# diff 差分
#intersection 计算交集
#union 计算并集
obj = Series([4.5,7.2,-5.3,3.6],index=['d','b','a','c'])

obj2=obj.reindex(['a','b','c','d','e'])

#实现向前值填充
obj3=Series(['blue','purple','yellow'],index=[0,2,4])

obj3.reindex(range(6),method='ffill')

frame=DataFrame(np.arange(9).reshape((3,3),index=['a','c','d'],columns=['ohio','texas','california'])

frame2=frame.reindex(['a','b','c','d'])

#更改列名
states= ['texas','utah','california']
frame.reindex(columns=states)
#插入列
frame.reindex(index=['a','b','c','d'],method='ffill',columns=states)

#丢弃指定项目
obj=Series(np.arange(5.),index=['a','b','c','d','e'])

new_obj=obj.drop('c')
obj.drop(['d','c'])

#dataframe可以随意删除轴上的索引
data=DataFrame(np.arange(16).reshape((4,4)),index=['ohio','colorado','utah','new york'],columns=['one','two','three','four'])

data.drop(['colorado','ohio'])

data.drop('two',axis=1)

data.drop(['two','four'],axis=1)

#索引、选取、过滤

obj=Series(np.arange(4.),index=['a','b','c','d'])

obj[1]

obj[2:4];obj[[1,3]]  ;obj[obj<2] #索引基本与R一致，除了角标从0开始的特点不同

#算数运算和数据对齐

s1=Series([7.3,-2.5,3.4,1.5],index=['a','b','d','e'])
s2=Series([-2.1,3.6,-1.5,4,3.1],index=['a','c','e','f','g'])
#会根据标签自动补齐
df1= DataFrame(np.arange(9.).reshape((3,3)),columns=list('bcd'),index=['ohio','texas','colorado'])
df2=DataFrame(np.arange(12.).reshape((4,3)),columns=list('bde'),index=['utah','ohio','texas','orgon'])
df1
df2
df1+df2#重叠的位置相加，不重叠的位置成NA值

df1.add(df2,fill_value=0)#不重叠的位置填充
# add 加法  sub 建法 div 除法 mul 乘法
#dataframe和series之间的运算

arr= np.arange(12.).reshape((3,4))
arr
arr[0]
arr-arr[0] #每行都减去arr[0]

frame=DataFrame(np.arange(12.).reshape((4,3)),columns=list('bde'),index=['utah','ohio','texas','oregon'])
series=frame.ix[0]
series #切了第一行出来
frame-series #dataframe和series之间的运算会被匹配到列的运算 #由于列名有相同索引
series2=Series(range(3),index=['b','e','f'])
frame+series2 #索引不同会成空值

series3=frame['d']
frame
frame.sub(series3,axis=0)

#函数应用和映射
frame=DataFrame(np.random.randn(4,3),columns=list('bde'),index=['utah','ohio','texas','oregon'])
frame.abs()
np.abs(frame) #取绝对值
f=lambda x:x.max()-x.min()  #简单的函数
frame.apply(f)   #对列进行减法
frame.apply(f,axis=1) #对行进行减法  #apply将函数应用到制定数据框

def f(x):
   return Series([x.min(),x.max()],index=['min','max'])

frame.apply(f)
f(frame) #无法形成表的形式

#应用于函数级的函数
format= lambda x: '%.2f' %x

frame.applymap(format) #函数级应用

frame['e'].map(foramt)

#排序和排名
obj=Series(range(4),index=['d','a','b','c'])
obj.sort_index() #对索引进行排序

frame=DataFrame(np.arange(8).reshape((2,4)),index=['three','one'],columns=['d','a','b','c'])

frame.sort_index()
frame.sort_index(axis=1)  #于series的区别在于有两个轴可以排序
frame.sort_index(axis=1,ascending=False)  #降序排列
obj=Series([4,7,-3,2]) #使用order对series排列
obj.order()
frame=DataFrame({'b':[4,7,-3,2],'a':[0,1,0,1]})
frame.sort_index(by='b')
frame.sort_index(by=['a','b']) #两列排序

obj=Series([7,-5,7,4,2,0,4])
obj.rank()  #给出一个排名，6.5表示有两个排在同样位置的
obj.rank(method='first') #给出排名，根据原来的出现顺序
obj.rank(ascending=False,method='max')  #降序排名
frame=DataFrame({'b':[4.3,7,-3,2],'a':[0,1,0,1],'c':[-2,5,8,-2.5]})

frame.rank()
frame.rank(axis=1) #竖排列和横排列

#破坏排名平级的method选项 用法： obj.rank(method='xx')
""" 
averange  分配平均排名 默认
min  分组的最小排名
max  分组的最大排名
first 出现顺序排名
"""
#带有重复值的轴索引
obj=Series(range(5),index=['a','a','b','b','c'])
obj
obj.index.is_unique  #标签是不是唯一的
obj['a']  #不会索引出唯一值

df=DataFrame(np.random.randn(4,3),index=['a','a','b','b'])

df.ix['b']  #数据框的索引要加ix

###
#####
######汇总和计算描述统计
df=DataFrame([[1.4,np.nan],[7.1,-4.5],[np.nan,np.nan],[0.75,-1.3]],index=['a','b','c','d'],columns=['one','two'])
df
df.sum() #返回列的和
df.sum(axis=1) #返回行的和
#na值被排除了
df.mean(axis=1,skipna=False) #有缺失值的行被排除了

df.idxmax() #返回的不是最大值，是最大值的索引
df.cumsum() #返回累加值
df.describe() #像R里面 的summary

obj=Series(['a','a','b','b','c']*4)  #*4重复四次。。还有这种操作
obj.describe()  #返回值统计
#描述统计方法
"""
count  非na值的数量
describe 各类统计
min max 最大最小值
argmin argmax 各类值的最大最小值索引未知
idxmin idxmax 类似上面
quantile 分位数
sum 和
mean 平均数
median 中位数
mad  平均绝对离差
var 方差
std  标准差
skew 偏度
kurt 峰度
cumsum 累加值
cummin、cummax 累计最大值和累计最小值
cumprod 累计积
diff 一阶差分
pct_change 计算百分数变化
"""
#相关系数和协方差
import pandas.io.data as web
from pandas_datareader import data,web 
all_data={}
  for ticker in ['AAPL','IBM','GOOG']:
    all_data[ticker]=web.get_data_yahoo(ticker,'1/1/2000','1/1/2010')
price=DataFrame({tic:data['Adj Close']
          for tic,data in all_data.iteritems()})
volume= DataFrame({tic:data['Volume']
          for tic,data in all_data.iteritems()})

#包改变了，难以完成
returns=DataFrame({'AAPL':(0.034339,0.012294,-0.011861,0.012147,-0.004300),
'GOOG':(0.011117,0.007098,-0.005571,0.005376,-0.004416),'IBM':(0.004420,0.013282,-0.003474,0.005468,-0.012609),
'MSFT':(0.002747,0.005479,0.006812,-0.013532,-0.015432)},index=('2009-12-14',
'2009-12-28','2009-12-29','2009-12-30','2009-12-31'))

returns.MSFT.corr(returns.IBM)  #计算相关系数
returns.MSFT.cov(returns.IBM) #计算协方差
returns.corr()  #返回相关系数矩阵
returns.corrwith(returns.IBM) #计算IBM和其他列的相关系数

#唯一值、值计数及成员资格
obj=Series(['c','a','d','a','a','b','b','c','c'])
uniques=obj.unique()
uniques
obj.value_counts()#值计算
pd.value_counts(obj.values,sort=False)  #可用于数组或序列

data=DataFrame({'Qu1':[1,3,4,3,4],'Qu2':[2,3,1,2,3],'Qu3':[1,5,2,4,4]})
result=data.apply(pd.value_counts)
result=data.apply(pd.value_counts).fillna(0)  #于上面的相比，不输出na值

#处理缺失数据
string_data=Series(['aardvark','artichoke',np.nan,'avocado'])
string_data
string_data.isnull() #判断是否na值
string_data[0]=None

#na值处理方法
dropna #滤过na值
fillna #用差值的方式填充 比如 fill 或bifll
isnull #判断缺失值
notnull #与isnull相反

#过滤缺失数据
from numpy import nan as NA
data=Series([1,NA,3.5,NA,7])

data.dropna()
data[data.notnull()]
#page 161
data=DataFrame([[1.,6.5,3.],[1.,NA,NA],[NA,NA,NA],[NA,6.5,3.]])
cleaned=data.dropna() #存在na值的行全删
data.dropna(how='all') #只删正行都是na值的
data.dropna(how='all',axis=1)

df=DataFrame(np.random.randn(7,3))
df.ix[:4,1]=NA;df.ix[:2,2]=NA
#填补缺失数据
df.fillna(0) #将缺失值填补为0

df.fillna({1:0.5,2:-1})#将第一列填补为0.5，第二列填补为-1

df=DataFrame(np.random.randn(6,3))
df.ix[2:,1]=NA;df.ix[4:,2]=NA
df.fillna(method='fill')

data=Series([1.,NA,3.5,NA,7])
data.fillna(data.mean())  #使用平均数填补
#limit参数表示连续填充的最大数量

####层次化索引
data=Series(np.random.randn(10),index=[['a','a','a','b','b','b','c','c','d','d'],[1,2,3,1,2,3,1,2,2,3]])
data.index
data['b']
data['b':'c']
data.ix[['b','c']]
data[:,2]  #抽取每一层的2序数字

data.unstack() #转置为二维数据框

frame=DataFrame(np.arange(12).reshape((4,3)),index=[['a','a','b','b'],[1,2,1,2]],columns=[['ohio','ohio','colorado'],['green','red','green']])
frame.index.names=['key1','key2']
frame.columns.names=['state','color']

#####使用DataFrame的列
frame=DataFrame({'a':range(7),'b':range(7,0,-1),'c':['one','one','one','two','two','two','two'],'d':[0,1,2,0,1,2,3]})
frame2=frame.set_index(['c','d'])
frame.set_index(['c','d'],drop=False)

#end
